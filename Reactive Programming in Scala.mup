{
  "title": "Reactive Programming in Scala",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "Monads",
      "id": 12,
      "ideas": {
        "1": {
          "title": "Parametric type M[T]",
          "id": 14
        },
        "2": {
          "title": "two operations",
          "id": 15,
          "ideas": {
            "1": {
              "title": "flatMap[U](F: T=> M[U]): M[U]",
              "id": 16,
              "ideas": {
                "1": {
                  "title": "often referred to as bind",
                  "id": 18
                }
              }
            },
            "2": {
              "title": "unit[T](x: T): M[T]",
              "id": 17
            },
            "3": {
              "title": "map CAN be defined",
              "id": 24,
              "ideas": {
                "1": {
                  "title": "m map f == m flatMap (x => unit(f(x)))",
                  "id": 26
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {
              "background": "#E0E0E0"
            }
          }
        },
        "3": {
          "title": "examples",
          "id": 19,
          "ideas": {
            "1": {
              "title": "List: unit(x) = List(x)",
              "id": 20
            },
            "2": {
              "title": "Set: unit(x) = Set(x)",
              "id": 21
            },
            "3": {
              "title": "Option: unit(x) = Some(x)",
              "id": 22
            },
            "4": {
              "title": "Generator: unit(x) = Single(x)",
              "id": 23
            },
            "5": {
              "title": "Try",
              "id": 37,
              "ideas": {
                "1": {
                  "title": "resembles Option, BUT...",
                  "id": 38,
                  "ideas": {
                    "2": {
                      "title": "has a Failure case class with an exception",
                      "id": 46,
                      "attr": {
                        "style": {
                          "background": "#E0E0E0"
                        }
                      }
                    },
                    "3": {
                      "title": " has a Success case class with a value",
                      "ideas": {},
                      "id": 47,
                      "attr": {
                        "style": {
                          "background": "#E0E0E0"
                        }
                      }
                    }
                  }
                },
                "2": {
                  "title": "Encapsulates a try-catch in it's apply definition",
                  "id": 48
                },
                "3": {
                  "title": "Try-valued computations can be composed in for expressions",
                  "id": 49
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {
              "background": "#E0E0E0"
            }
          }
        },
        "4": {
          "title": "Laws",
          "id": 27,
          "ideas": {
            "1": {
              "title": "Associativity",
              "id": 28,
              "ideas": {
                "1": {
                  "title": "m flatMap f flatMap g == m flatMap (x => f(x) flatMap g)",
                  "id": 29
                },
                "2": {
                  "title": "Allows writing nested for expressions in one expr, using multiple values",
                  "id": 35
                }
              }
            },
            "2": {
              "title": "left unit",
              "id": 30,
              "ideas": {
                "1": {
                  "title": "unit(x) flatMap f == f(x)",
                  "id": 33
                },
                "2": {
                  "title": "Try fail this because Try(expr) flatMap f != f(expr)",
                  "id": 50,
                  "ideas": {
                    "1": {
                      "title": "That is because the LHS will not throw a non-fatal exception (it's handled), but the RHS might.",
                      "id": 51
                    }
                  }
                }
              }
            },
            "3": {
              "title": " right unit",
              "id": 32,
              "ideas": {
                "1": {
                  "title": "m flatMap unit == m",
                  "id": 34
                },
                "2": {
                  "title": "allows that                      for(x <- m) yield x == m",
                  "id": 36
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {
              "background": "#E0E0E0"
            }
          }
        },
        "5": {
          "title": "Monads are types that have operators which guide you through the happy path",
          "id": 90
        },
        "6": {
          "title": "Try[T]",
          "id": 91,
          "ideas": {
            "1": {
              "title": "Use the scala.util.Try[T] type to present the possibility of failure explicitly",
              "id": 82,
              "ideas": {
                "1": {
                  "title": "higher-order functions can also operate on the Try type",
                  "id": 83,
                  "ideas": {
                    "1": {
                      "title": "flatMap[S](f: (T => Try[T]))",
                      "id": 84
                    },
                    "2": {
                      "title": "flatten",
                      "id": 85
                    },
                    "3": {
                      "title": "map",
                      "id": 86
                    },
                    "4": {
                      "title": "filter",
                      "id": 87
                    },
                    "5": {
                      "title": "recoverWith",
                      "id": 88
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {
                      "background": "#E0E0E0"
                    }
                  }
                },
                "2": {
                  "title": "Try[T] is an exception-handling monad",
                  "id": 89
                }
              },
              "attr": {
                "style": {
                  "background": "#E0E0E0"
                }
              }
            }
          }
        },
        "7": {
          "title": "Future[T]",
          "id": 92,
          "ideas": {
            "1": {
              "title": "scala.concurrent",
              "id": 93,
              "ideas": {
                "1": {
                  "title": "onComplete(callback: Try[T] => Unit): Unit",
                  "id": 94
                },
                "2": {
                  "title": "apply(body: => T)",
                  "id": 97
                }
              }
            },
            "2": {
              "title": "always use Future for long-running computations",
              "id": 95,
              "ideas": {}
            }
          }
        }
      },
      "attr": {
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "2": {
      "title": "Additional exercises",
      "id": 63,
      "ideas": {
        "1": {
          "title": "create a REPEAT...UNTIL loop construct",
          "id": 64,
          "ideas": {
            "1": {
              "title": "REPEAT { /* some operations */ } UNTIL (/*some condition*/)",
              "id": 66
            }
          },
          "attr": {
            "collapsed": true,
            "style": {
              "background": "#E0E0E0"
            }
          }
        }
      }
    },
    "-1": {
      "title": "Mutability and state",
      "id": 52,
      "ideas": {
        "1": {
          "title": "Operational equivalence",
          "id": 53,
          "ideas": {
            "1": {
              "title": "Elements x and y are the same if no possible test can distinguish between them",
              "id": 54
            },
            "2": {
              "title": "Examples",
              "id": 55,
              "ideas": {
                "1": {
                  "title": "val x = new BankAccount; val y = new BankAccount;     f(x,y)",
                  "id": 56,
                  "ideas": {
                    "1": {
                      "title": "val x = new BankAccount; val y = new BankAccount;     f(x,x)",
                      "ideas": {
                        "1": {
                          "title": "If there is a difference between the sequences - x and y are not the same",
                          "id": 59
                        }
                      },
                      "id": 58,
                      "attr": {
                        "style": {
                          "background": "#E0E0E0"
                        }
                      }
                    },
                    "2": {
                      "title": "f is an arbitrary function having some effects based on provided values",
                      "id": 60
                    }
                  }
                }
              }
            },
            "3": {
              "title": "To prove that two things are different, a single counter example is enough",
              "id": 61
            },
            "4": {
              "title": "To prove that two things are the same, a possibly infinite number of examples is required",
              "id": 62
            }
          }
        }
      },
      "attr": {
        "collapsed": true,
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "-2": {
      "title": "discrete event simulation",
      "id": 67,
      "ideas": {
        "1": {
          "title": "performs actions specified by user at a given moment",
          "id": 68,
          "ideas": {
            "1": {
              "title": "an action is a parameterless function",
              "id": 69
            }
          }
        },
        "2": {
          "title": "Simulation",
          "id": 70,
          "ideas": {
            "1": {
              "title": "currentTime: Int",
              "id": 80
            }
          }
        },
        "3": {
          "title": "Gates",
          "id": 73,
          "ideas": {
            "1": {
              "title": "Wire",
              "id": 76,
              "ideas": {
                "1": {
                  "title": "getSignal: Boolean",
                  "id": 77
                },
                "2": {
                  "title": "setSignal",
                  "id": 78
                },
                "3": {
                  "title": "addAction",
                  "id": 79
                }
              },
              "attr": {
                "collapsed": true,
                "style": {
                  "background": "#E0E0E0"
                }
              }
            }
          }
        },
        "4": {
          "title": "Circuits",
          "id": 74
        },
        "5": {
          "title": "MySimulation",
          "id": 75
        }
      },
      "attr": {
        "collapsed": true,
        "style": {
          "background": "#E0E0E0"
        }
      }
    }
  },
  "links": []
}